#!/usr/bin/env rua
local cmdline = require 'ext.cmdline'.validate{
	help = require 'ext.cmdline'.showHelpAndQuit,
	gl = {desc='gl ffi lib'},
	force = {desc="Force rebuilding the equations, instead of using a cached copy."},
	usecache = {desc="Force using the cached copy regardless of timestamp."},
	size = {desc="grid size"},
	useFBO = {desc="use FBO MSAA"},
	fboScale = {desc="MSAA scale"},
}(...)

local matrix_ffi = require 'matrix.ffi'
local template = require 'template'
local sdl = require 'sdl'
local gl = require 'gl.setup'(cmdline.gl or 'OpenGL')
local GLProgram = require 'gl.program'
local GLFBO = require 'gl.fbo'
local GLTex2D = require 'gl.tex2d'
local GLTexCube = require 'gl.texcube'
local GLSceneObject = require 'gl.sceneobject'
local glreport = require 'gl.report'
local ig = require 'imgui'
local vec2f = require 'vec-ffi.vec2f'
local vec3f = require 'vec-ffi.vec3f'
local vec4f = require 'vec-ffi.vec4f'
local vector = require 'ffi.cpp.vector-lua'

local App = require 'imgui.appwithorbit'()
App.title = 'seashell'

-- used here and eqn.lua for where to read/write the eqn cache
App.cachefile = 'cached-eqns.glsl'

App.initGL = |:, ...| do
	App.super.initGL(self, ...)

	self.view.zfar = 1000

	-- uniforms
	self.guivars = table{
		-- hmm if I make these perturbations positive-only, I can add an exponent to them and control their sharpness...
		shellPerturbAmplU = .01,
		shellPerturbPeriodU = 40,
		shellPerturbAmplV = .02,
		shellPerturbPeriodV = 50,
		shellPeriodV = 1.1,
		shellExpScaleMinV = -3,
		shellExpScaleMaxV = 3,

		circleOfsX = 0,	-- set this to give it a point
		circleOfsY = 1,	-- keep this 1 to offset the initial circle to have its edge at the origin
		circleOfsZ = 0,	-- meh?

		gridWidth = cmdline.size or 2000,
		gridHeight = cmdline.size or 2000,

		fboScaleX = cmdline.fboScale or 2,
		fboScaleY = cmdline.fboScale or 2,

		useFBO = cmdline.useFBO ?? true,

		-- chromatic aberration ratios
		ratioR = .3,
		ratioG = .2,
		ratioB = .1,
	}
	self.guivarnames = self.guivars:map(|v,k,t|(k, #t+1)):sort()

	self.guicallbacks = {
		gridWidth = || self:rebuildObj(),
		gridHeight = || self:rebuildObj(),
		fboScaleX = || self:rebuildFBO(),
		fboScaleY = || self:rebuildFBO(),
	}

	local glslcode
	if cmdline.force then
		glslcode = require 'eqn'(self, true)
	elseif cmdline.usecache then
		glslcode = assert(path(self.cachefile):read())
	else
		local Targets = require 'make.targets'
		Targets{verbose=true, {
			dsts = {self.cachefile},
			srcs = {'eqn.lua'},		-- cache as long as this file hasn't changed
			rule = || require 'eqn'(self),
		}}:run(self.cachefile)
		glslcode = assert(path(self.cachefile):read())
	end

	gl.glEnable(gl.GL_DEPTH_TEST)
	self.bgcolor = vec4f(.3, .3, .3, 1)

	self.shader = GLProgram{
		version = 'latest',
		precision = 'best',
		vertexCode = template([[
#define M_PI <?=('%.50f'):format(math.pi)?>
in vec2 vtx;
out vec3 redv, greenv, bluev;
uniform mat4 mvMat, projMat;

<? for _,k in ipairs(self.guivarnames) do
	local v = self.guivars[k]
?>uniform float <?=k?>;
<? end
?>

void main() {
	vec3 normal;
	vec3 pos;

	{
<?=glslcode?>
	}

	vec3 normalv = normalize((mvMat * vec4(normal, 0)).xyz);
	gl_Position = projMat * (mvMat * vec4(pos, 1.));

	vec3 view = -mvMat[0].xyz;
	vec3 incident = reflect(view, normalv);
	redv = refract(incident, normalv, ratioR);
	greenv = refract(incident, normalv, ratioG);
	bluev = refract(incident, normalv, ratioB);
}
]], {
	self = self,
	glslcode = glslcode,
}),
		fragmentCode = [[
in vec3 redv, greenv, bluev;
out vec4 fragColor;
uniform samplerCube skyTex;
void main() {

	fragColor = vec4(
		texture(skyTex, redv).r,
		texture(skyTex, greenv).g,
		texture(skyTex, bluev).b,
		1.);
}
]],
		uniforms = {
			skyTex = 0,
		},
	}:useNone()

	local skytexbase = 'cloudy/bluecloud_'
	self.skyTex = GLTexCube{
		--[[
		filenames = {
			skytexbase..'posx.jpg',
			skytexbase..'negx.jpg',
			skytexbase..'posy.jpg',
			skytexbase..'negy.jpg',
			skytexbase..'posz.jpg',
			skytexbase..'negz.jpg',
		},
		--]]
		-- [[
		filenames = {
			skytexbase..'ft.jpg',
			skytexbase..'bk.jpg',
			skytexbase..'up.jpg',
			skytexbase..'dn.jpg',
			skytexbase..'rt.jpg',
			skytexbase..'lf.jpg',
		},
		--]]
		wrap={
			s=gl.GL_CLAMP_TO_EDGE,
			t=gl.GL_CLAMP_TO_EDGE,
			r=gl.GL_CLAMP_TO_EDGE,
		},
		magFilter = gl.GL_LINEAR,
		minFilter = gl.GL_LINEAR,	-- GL_LINEAR_MIPMAP_LINEAR,
		--generateMipmap = true,
	}:unbind()

	self.skyboxShader = GLProgram{
		version = 'latest',
		precision = 'best',
		vertexCode = [[
in vec3 vtx;
out vec3 tcv;
uniform mat4 projMat;
void main() {
	vec4 worldpos = vec4(vtx, 1.);
	tcv = worldpos.xyz;
	gl_Position = projMat * worldpos;
}
]],
		fragmentCode = [[
in vec3 tcv;
out vec4 fragColor;
uniform samplerCube skyTex;
void main() {
	fragColor = texture(skyTex, tcv);
}
]],
		uniforms = {
			skyTex = 0,
		},
	}:useNone()

	local skyboxVertexes = table()
	local s = 1
	for dim=0,2 do
		for bit2 = 0,1 do	-- plus/minus side
			local quadVtxs = table()
			for bit1 = 0,1 do	-- v texcoord
				for bit0 = 0,1 do	-- u texcoord
					local i2 = (bit0 ~ bit1 ~ bit2) | (bit1 << 1) | (bit2 << 2)
					-- now rotate i2 by dim
					local i = 7 & ((i2 << dim) | (i2 >> (3 - dim)))
					local x = 1 & i
					local y = 1 & (i >> 1)
					local z = 1 & (i >> 2)
					quadVtxs:insert{s*(x*2-1),s*(y*2-1),s*(z*2-1)}
				end
			end
			for _,i in ipairs{1, 2, 4, 3, 4, 2} do
				skyboxVertexes:append(quadVtxs[i])
			end
		end
	end

	self.skyboxObj = GLSceneObject{
		program = self.skyboxShader,
		geometry = {
			mode = gl.GL_TRIANGLES,
			count = 36
		},
		texs = {self.skyTex},
		attrs = {
			vtx = {
				buffer = {
					data = skyboxVertexes,
				},
			},
		},
	}

	self.fboProjMat = matrix_ffi({4,4}, 'float'):zeros():setOrtho(0, 1, 0, 1, -1, 1)
	self.updateFBOSceneObj = GLSceneObject{
		program = {
			version = 'latest',
			precision = 'best',
			vertexCode = [[
in vec2 vtx;
out vec2 tcv;
uniform mat4 projMat;
void main() {
	tcv = vtx;
	gl_Position = projMat * vec4(vtx, 0., 1.);
}
]],
			fragmentCode = [[
in vec2 tcv;
out vec4 fragColor;
uniform sampler2D fboTex;
void main() {
	fragColor = texture(fboTex, tcv);
}
]],
			uniforms = {
				fboTex = 0,
			},
		},
		geometry = {
			mode = gl.GL_TRIANGLE_STRIP,
			count = 4,
		},
		attrs = {
			vtx = {
				buffer = {
					data = {
						0, 0,
						1, 0,
						0, 1,
						1, 1,
					},
				},
			},
		},
	}

	self:rebuildFBO()
	self:rebuildObj()
end

App.rebuildFBO = |:| do
	local fboWidth = self.width * self.guivars.fboScaleX
	local fboHeight = self.height * self.guivars.fboScaleY
	self.fboTex = GLTex2D{
		width = fboWidth,
		height = fboHeight,
		internalFormat = gl.GL_RGBA,
		format = gl.GL_RGBA,
		type = gl.GL_UNSIGNED_BYTE,
		data = ffi.new('uint8_t[?]', fboWidth * fboHeight * 4),
		minFilter = gl.GL_LINEAR_MIPMAP_LINEAR,
		magFilter = gl.GL_LINEAR,
	}:unbind()

	self.fbo = GLFBO{
		width = fboWidth,
		height = fboHeight,
		useDepth = true,
		dest = self.fboTex,
	}:unbind()
end

App.rebuildObj = |:| do
	local m = self.guivars.gridWidth
	local n = self.guivars.gridHeight

	self.vtxVec = vector'vec2f_t'
	self.vtxVec:resize((m + 1) * (n + 1))
	self.indexVec = vector'int'
	self.indexVec:resize(m * n * 6)

	local vi = 0
	local ei = 0
	for j=0,n do
		for i=0,m do
			local u = i/m
			local v = j/n
			self.vtxVec.v[vi]:set(u, v)
			vi += 1
			if i < m and j < n then
				self.indexVec.v[ei] = i + (m+1) * j
				ei += 1
				self.indexVec.v[ei] = (i+1) + (m+1) * j
				ei += 1
				self.indexVec.v[ei] = (i+1) + (m+1) * (j+1)
				ei += 1
				self.indexVec.v[ei] = (i+1) + (m+1) * (j+1)
				ei += 1
				self.indexVec.v[ei] = i + (m+1) * (j+1)
				ei += 1
				self.indexVec.v[ei] = i + (m+1) * j
				ei += 1
			end
		end
	end

	self.vtxBuf = require 'gl.arraybuffer'{
		data = self.vtxVec.v,
		size = ffi.sizeof(self.vtxVec.type) * self.vtxVec.size,
	}:unbind()

	self.obj = GLSceneObject{
		geometry = {
			mode = gl.GL_TRIANGLES,
			vertexes = self.vtxBuf,
			indexes = require 'gl.elementarraybuffer'{
				data = self.indexVec.v,
				size = ffi.sizeof(self.indexVec.type) * self.indexVec.size,
				type = gl.GL_UNSIGNED_INT,
			}:unbind(),
			count = self.indexVec.size,
		},
		program = self.shader,
		attrs = {
			vtx = self.vtxBuf,
		},
	}
end

-- assumes the viewport and self.view is already set up
App.drawScene = |:| do
	gl.glClearColor(self.bgcolor:unpack())
	gl.glClear(gl.GL_COLOR_BUFFER_BIT | gl.GL_DEPTH_BUFFER_BIT)

	-- draw sky cube with no depth
	-- TODO make it rotate with the orbit angle

	gl.glDisable(gl.GL_DEPTH_TEST)
	--gl.glEnable(gl.GL_CULL_FACE)
	self.skyboxObj.uniforms.projMat = self.view.projMat.ptr
	self.skyboxObj:draw()
	gl.glEnable(gl.GL_DEPTH_TEST)

	-- draw scene

	local shader = self.shader
	shader:use()
	gl.glUniformMatrix4fv(shader.uniforms.mvMat.loc, 1, gl.GL_FALSE, self.view.mvMat.ptr)
	gl.glUniformMatrix4fv(shader.uniforms.projMat.loc, 1, gl.GL_FALSE, self.view.projMat.ptr)
	shader:setUniforms(self.guivars)
	shader:useNone()

	self.skyTex:bind()
	self.obj:draw()
	self.skyTex:unbind()
end

App.update = |:| do
	if not self.guivars.useFBO then
		self:drawScene()
	else
		self.fbo:draw{
			viewport = {0, 0, self.fbo.width, self.fbo.height},	-- seems the fbo could figure this out itself ...
			callback = || self:drawScene(),
		}

		-- generate mipmap
		self.fboTex
			:bind()
			:generateMipmap()
			:unbind()

		-- draw supersample back to screen

		gl.glClear(gl.GL_COLOR_BUFFER_BIT | gl.GL_DEPTH_BUFFER_BIT)

		self.updateFBOSceneObj.uniforms.projMat = self.fboProjMat.ptr
		self.updateFBOSceneObj.texs[1]  = self.fboTex
		self.updateFBOSceneObj:draw()
	end
	App.super.update(self)
glreport'here'
end

local typeHandlers = {
	boolean = |:, k| ig.luatableCheckbox(k, self.guivars, k),
	number = |:, k| ig.luatableInputFloatAsText(k, self.guivars, k),
}

local I = |...|...

App.updateGUI = |:| do
	local mesh = self.mesh
	if ig.igBeginMainMenuBar() then
		if ig.igBeginMenu'Settings' then
			for _,k in ipairs(self.guivarnames) do
				local v = self.guivars[k]
				-- TODO language issue, I can't just call these, they have to be assigned somewhere
				I(typeHandlers![type(v)](self, k) and self.guicallbacks?[k]?())
			end
			ig.igColorPicker3('background color', self.bgcolor.s, 0)
			ig.igEndMenu()
		end
		ig.igEndMainMenuBar()
	end
end

App.resize = |:| do
	App.super.resize(self)
	self:rebuildFBO()
end

return App():run()
